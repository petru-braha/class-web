## week 1

- <p> just for simple text
- view port is the area where the resources are loaded. it does not belong to the browser elements
- html element: <p>content</p>

- script tag can be used outside of the html standard body

- what is visible in view port will be placed in the body, everything else in head

## week 2

- <div> and <span> doesn't do anything functionally and visually
- <span> inside of text
- <br> inside of text

- padding(bettween element with their own border, if no border) vs margin(to another element)

- content - padding - border - margin(think of it in raport of other elements (always))

- css: selector { properties: name : value; };
- id select should be unique (even if css can)

- html ref => ids

- selector
  - markup
  - class
  - id
  - global: *
  - attribute

- pseudo-class ":"->state - (hover, first-child)
- pseudo-element "::"->content - (first-line, before, after)

- descendant combinators
  - read them from right to left
  - constraint from left to right
  - e.g.: body section p
https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Combinators

- next - + 
- subsequent

## week 3

- block vs inline display

- block == one below another'

- cascade(specificity, source order, importance), inheritance
- specificity: id selector > class selector > element selector
  - each selector has a score for
    - id
    - classes (also attribute selectors: "[]")
    - elements
  - specificity conflicts => iterate the matched selectors, see score 
- there are properties that can not be inherited

- css origin
  - external stylesheet = extra file
  - head tag inside the tag style 
  - any hypertag - style tag/attribute

- flex and grid (read about them) - floats chapter

- float cuts up the view port

- horizontal scroll - BAD PRACTICE
- tables - will enforce the horizontal scroll

## solo

- article
  - encloses info on the page that has meaning by its own
  - e.g. blog post

- section
  - groups up info on the page that provides functionality
  - starts with heading

- <blockquote> vs <q> == block vs inline
- <pre> - preserves the white spaces

- <a href=""><cite>
- <address> = contact information
- <sup> <sub> - inline

- attributes:
  - title is displayed when hovering over the content
  - target="_blank" => open in a new tab
  - alt is alternative text in case if the resource can not load
  - specifying width and height allocates space before loading image
  - display: block/inline - refers to outer box display
    - by default flex/grid refers to outer box too

- document fragments - href of an id
- use your own content (images)

- licenses
  - all rights reserved (default)
    - you need explicit written permission to use the content
    - you DO NOT need that in case of fair use
      - quoting/commenting upon
      - criticize
      - parody
    - authors are not required to include a copyright notice
  - permissive - mit licence
  - public domain/CC0

- replaced element = its content and size is changed my external source

- be aware
  - "h1, h2" = selector list
  - "h1 h2" = combinators

- css data type: <dimension> covers
  - <length>
  - <angle>
  - <time>
  - <resolution>

- px, em(relative), vh, vw

week 4:

- 1fr one fraction - of the container

- responsivness = relative dimensions
  - inch
  - count of pixels
  - flexboxes / grids g00d
  - media query - if statements about context

- device independent pixels
  - viewport is smaller than a the screen itself

- <meta name="viewport" content="width=device-width, initial-scale=1">
- design an interface for mobile first and then for desktop
  - starting with 300 pixels
  - see dev tools for seeing
  - example: hidden navigation bar for phones 

- device independent pixels : the reported view-port by the device NOT native

- in css:

```
@media (max-width: 600px) {

}

@media (min-width: 601px) {

}
```


- todo:
  - Backgrounds and borders

  - Overflowing content
  - flex grid
  - position

  - play the game after reading the theory

  - Challenge: Fundamental layout comprehension
